#LOOP msd

from gc import get_objects
import time
import numpy as np
from cmath import sqrt
from turtle import addshape, delay
import pygame.camera
import pymunk,pymunk.pygame_util
import pygame,pygame.image
import sys
import matplotlib.pyplot as plt
from pygame.locals import USEREVENT, QUIT, KEYDOWN, KEYUP, K_s, K_r, K_q, K_ESCAPE, K_UP, K_DOWN

# elasticity of floor is 1 
# Vacuum environment
# l m

def main(sx=1300,sy=650):
    

    def addfloor(space,y=0,e=0.8):
        floor = pymunk.Segment(space.static_body,(-100,sy-y),(sx+100,sy-y),y)
        floor.elasticity = e
        floor.friction = 12
        space.add(floor)
    def addSpring(space,m0=1,m1=1,m2=1,length=50,stiffness=500,damping=60,
            x0=100,y0=600,size=5,e=0.9):

        global b0
        global b1
        global b2 

        global link0
        global link1
        global link2

        b0 = pymunk.Body(mass=m0,moment=1e99)
        b0.position = (100,y0)

        c0 = pymunk.Poly.create_box(b0, (0.1*size*m0, size))
        c0.elasticity = e
        c0.friction= 1

        b1 = pymunk.Body(mass=m1,moment=1e99)
        b1.position = (100,500)
        c1 = pymunk.Poly.create_box(b1, (0.1*size*m1, size))
        c1.elasticity = e
        c1.friction = 1

        b2 = pymunk.Body(mass=m2,moment=1e99)
        b2.position = (200,600)
        c2 = pymunk.Poly.create_box(b2, (0.1*size*m1, size))
        c2.elasticity = e
        c2.friction= 1

        len01=b0._get_position().get_distance(b1._get_position())
        len12=(b2._get_position().get_distance(b1._get_position()))
        len02=(b0._get_position().get_distance(b2._get_position()))

        link0 = pymunk.DampedSpring(a=b0, b=b1,
            anchor_a=(0,0), anchor_b=(0,0),
            rest_length=100, stiffness=stiffness, damping=damping)
   
        
        link1 = pymunk.DampedSpring(a=b0, b=b2,
            anchor_a=(0,0), anchor_b=(0,0),
            rest_length=100, stiffness=stiffness, damping=damping)

        link2 = pymunk.DampedSpring(a=b1, b=b2,
            anchor_a=(0,0), anchor_b=(0,0),
            rest_length=141.1, stiffness=stiffness, damping=damping)

        

        space.add(b0, c0, b1, c1, b2, c2, link0, link1, link2 )
        
        
        # space.add(b1, c1, b2, c2, link0)
    def changelen():
        link0.rest_length = 130
        link1.rest_length = 130
        
        # print("inside cl")

    def changelen2():
        
        link0.rest_length = 70
        link1.rest_length = 70

        # print("inside cl 2")





    space = pymunk.Space()
    space.gravity = 0,981
    addfloor(space,y=25)
    addSpring(space)

    # addpogo(space,m0=10,m1=2,x0=0.5*sx+100,damping=5,e=1)
    pygame.init()
    screen = pygame.display.set_mode((sx,sy))
    pygame.display.set_caption('Spring Mass Damper')
    clock = pygame.time.Clock()
    font = pygame.font.Font("freesansbold.ttf", 20)
    text = font.render('Manual Actuation of SMD system (actuating link b0b1, b0b2): k = 500, d = 60 ', True, "black", "white")
    textRect = text.get_rect()
    textRect.center = (700, 100)
    draw_options = pymunk.pygame_util.DrawOptions(screen)
    # pygame.camera.Camera
    

    
    

    i = 0
    timeline = []
    len_b0b1 = []
    len_b1b2 = []
    len_b2b0 = []
    cg_b0=[]
    init_b0_pos = 0
    fin_b0_pos = 0
    rest_len_link0=[]
    rest_len_link1=[]
    rest_len_link2=[]

    b0pos = []
    d=[]
    count = 0

    velb0=[]
    velb1=[]
    velb2=[]

    # camera = pygame.Vector2((0, 0))


    while True:
        

        
        timeline.append(i)

        if (i % 60 == 0 and i !=0 ):
            count+=1
            # print(count)
            # print(i)
        if (i> (count*60) and i < (((count+1)*60)-30)):
            # print(i)
            changelen2()
        else:
            changelen()
        # print(count)
        # print(i)
        #     changelen2()

        if(i == 1):
            init_b0_pos = b0._get_position()
        if(i>1):
            fin_b0_pos = b0._get_position()
            d.append(init_b0_pos.get_distance(fin_b0_pos))
        



        len_b0b1.append(b0._get_position().get_distance(b1._get_position()))
        len_b1b2.append(b2._get_position().get_distance(b1._get_position()))
        len_b2b0.append(b0._get_position().get_distance(b2._get_position()))
        b0pos.append(b0._get_position())

        velb0.append(b0._get_velocity().length)
        velb1.append(b1._get_velocity())
        velb2.append(b2._get_velocity())

        
        for event in pygame.event.get():
            

            if event.type==pygame.QUIT or (event.type==pygame.KEYDOWN and 
                    event.key==pygame.K_ESCAPE):

                # print(i)
                # print("distance travelled:   ", init_b0_pos.get_distance(fin_b0_pos))
                
                arr10= np.array(velb0)
                arr20= np.array(velb1)
                arr30= np.array(velb2)
                s = (init_b0_pos.get_distance(fin_b0_pos))/(timeline[-1])
                # print("avg speed:    ",s)

                # np.save("C:\\Users\\ev21468\\OneDrive - University of Bristol\\Documents\\Dissertation\\arr1.npy",arr10)
                # np.save("C:\\Users\\ev21468\\OneDrive - University of Bristol\\Documents\\Dissertation\\arr2.npy",arr20)
                # np.save("C:\\Users\\ev21468\\OneDrive - University of Bristol\\Documents\\Dissertation\\arr3.npy",arr30)
                # np.save("C:\\Users\\ev21468\\OneDrive - University of Bristol\\Documents\\Dissertation\\curr_rest_len_of_link1.npy",len_b2b0)
                
                # np.save("C:\\Users\\ev21468\\OneDrive - University of Bristol\\Documents\\Dissertation\\Phase2\\500\\d14.npy",d)

                # plt.figure(1,figsize= (25,10))
                # plt.plot(timeline, len_b0b1, label = "Resting Length of link b0b1")
                # plt.plot(timeline, len_b1b2, label = "Resting Length of link b1b2")
                # plt.plot(timeline, len_b2b0, label = "Resting Length of link b0b2")
                # plt.xlabel('Time (miliseconds)')
                # plt.ylabel('Resting Length (in meter)')
                # plt.title('Time local change in Resting Lengths')
                # plt.legend()
                # # plt.savefig("C:/Users/ev21468/OneDrive - University of Bristol/Documents/Dissertation/Phase2/4.png")
                # plt.show()

                # plt.figure(1,figsize= (25,10))
                # plt.plot(timeline[2:], d, label = "displacement")
                # plt.xlabel('Time (miliseconds)')
                # plt.ylabel('displacement with respect to start position (in meter)')
                # # plt.title('Time local change in Resting Lengths')
                # plt.legend()
                # # plt.savefig("C:/Users/ev21468/OneDrive - University of Bristol/Documents/Dissertation/Phase2/disp4.png")
                # plt.show()

                sys.exit(0)
        

        screen.fill(('white'))
        screen.blit(text, textRect)
        space.debug_draw(draw_options)
        space.step(1/60.)
        pygame.display.flip()
        clock.tick(60 if i else 1)
        # pygame.image.save(screen, f'tmp/a{i:05d}.jpg')
        i += 1

if __name__=='__main__':
    main()
# ffmpeg -i tmp/a%05d.jpg tmp.mp4 && del tmp\*.jpg